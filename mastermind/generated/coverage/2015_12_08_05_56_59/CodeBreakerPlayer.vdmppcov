class CodeBreakerPlayer
types
-- TODO Define types here
	public Key = seq of int;
	
values
-- TODO Define values here

instance variables
-- TODO Define instance variables here
	private currentKey: Key := [];
	private allKeys: seq of Key := [];
	
operations
-- TODO Define operations here
	public CodeBreakerPlayer: () ==> CodeBreakerPlayer
  	CodeBreakerPlayer() == (
  		return self
  	);
  	
  public CodeBreakerPlayer: (Key) ==> CodeBreakerPlayer
  	CodeBreakerPlayer(key) == (
  		currentKey := key;
  		AddKey(key);
  		return self
  	)
  pre len key < 5 and forall x in set elems key & (x > 0 and x < 7)
	post len allKeys = len allKeys~ + 1;
  
  public GetCurrentKey: () ==> Key
  	GetCurrentKey () == (
  		return currentKey;
  	)
  	pre len currentKey > 0;
  
  public AddKey : Key ==> ()
		AddKey (key) == (
			currentKey := key;
			allKeys := allKeys^[key];
		)
	pre len key > 0 and len key < 5 and forall x in set elems key & (x > 0 and x < 7)
	post len allKeys = len allKeys~ + 1;
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end CodeBreakerPlayer

class GameTests is subclass of MyTestCase

operations  

	public testPlayer : () ==> ()
		testPlayer() == (
		dcl player: Player := new Player();
		player.SetKey([1, 2, 3, 4]);
		assertEqual([1, 2, 3, 4], player.GetKey());
		assertEqual("Default", player.GetName());
		);
	
	public testPlayerWithKey : () ==> ()
		testPlayerWithKey() == (
		dcl player: Player := new Player("Cristo", [1, 2, 3, 4]);
		assertEqual([1, 2, 3, 4], player.GetKey());
		);

  public testGameWinnerCodeBreaker : () ==> ()
  	testGameWinnerCodeBreaker() == (
  		dcl codeMaker: Player := new Player("CodeMaker", [6, 6, 5, 2]);
  		dcl codeBreaker: Player := new Player("CodeBreaker");
  		dcl g: Game := new Game(codeMaker, codeBreaker);
  		
  		-- the result of the game initial moves is 10
  		assertEqual(10, g.GetCurrentMoves());
  		
  		-- code breaker makes the move [1, 1, 2, 2], and the expected result is (1, 0)
  		g.MakeMove([1, 1, 2, 2]);
  		assertEqual([1, 0], g.GetLastResult());
  		
  		-- code breaker makes the move [3, 3, 4, 4], and the expected result is (0, 0)
  		g.MakeMove([3, 3, 4, 4]);
  		assertEqual([0, 0], g.GetLastResult());
  		
  		-- code breaker makes the move [5, 5, 6, 6], and the expected result is (0, 3)
  		g.MakeMove([5, 5, 6, 6]);
  		assertEqual([0, 3], g.GetLastResult());
  		
  		-- code breaker makes the move [5, 6, 5, 2], and the expected result is (3, 0)
  		g.MakeMove([5, 6, 5, 2]);
  		assertEqual([3, 0], g.GetLastResult());
  		
  		-- code breaker makes the move [6, 6, 5, 2], the expected result is (4, 0) and he wins the game
  		g.MakeMove([6, 6, 5, 2]);
  		assertEqual([4, 0], g.GetLastResult());
  		
  		-- the winner was the code breaker
  		assertEqual("CodeBreaker", g.GetWinnerPlayer().GetName());
  		
  		IO`print("Winner is: ");
  		IO`println(g.GetWinnerPlayer().GetName());
  	);
  	
  	public testGameWinnerCodeMaker : () ==> ()
  	testGameWinnerCodeMaker() == (
  		dcl codeMaker: Player := new Player("CodeMaker", [1, 2, 4, 1]);
  		dcl codeBreaker: Player := new Player("CodeBreaker");
  		dcl g: Game := new Game(codeMaker, codeBreaker);
  		
  		-- the result of the game initial moves is 10
  		assertEqual(10, g.GetCurrentMoves());
  		
  		-- code breaker makes the move [1, 1, 2, 2], and the expected result is (1, 2)
  		g.MakeMove([1, 1, 2, 2]);
  		assertEqual([1, 2], g.GetLastResult());
  		
  		-- code breaker makes the move [3, 3, 4, 4], and the expected result is (1, 0)
  		g.MakeMove([3, 3, 4, 4]);
  		assertEqual([1, 0], g.GetLastResult());
  		
  		-- code breaker makes the move [5, 5, 6, 6], and the expected result is (0, 0)
  		g.MakeMove([5, 5, 6, 6]);
  		assertEqual([0, 0], g.GetLastResult());
  		
  		-- code breaker makes the move [2, 1, 3, 4], and the expected result is (0, 3)
  		g.MakeMove([2, 1, 3, 4]);
  		assertEqual([0, 3], g.GetLastResult());
  		
  		-- code breaker makes the move [1, 1, 1, 1], and the expected result is (2, 0)
  		g.MakeMove([1, 1, 1, 1]);
  		assertEqual([2, 0], g.GetLastResult());
  		
  		-- code breaker makes the move [2, 2, 2, 2], and the expected result is (1, 0)
  		g.MakeMove([2, 2, 2, 2]);
  		assertEqual([1, 0], g.GetLastResult());
  		
  		-- code breaker makes the move [1, 1, 3, 4], and the expected result is (1, 2)
  		g.MakeMove([1, 1, 3, 4]);
  		assertEqual([1, 2], g.GetLastResult());
  		
  		-- code breaker makes the move [2, 1, 3, 4], and the expected result is (0, 3)
  		g.MakeMove([2, 1, 3, 4]);
  		assertEqual([0, 3], g.GetLastResult());
  		
  		-- code breaker makes the move [1, 1, 2, 4], and the expected result is (1, 3)
  		g.MakeMove([1, 1, 2, 4]);
  		assertEqual([1, 3], g.GetLastResult());
  		
  		-- code breaker makes the move [1, 2, 1, 4], the expected result is (2, 2) and he wins the game
  		g.MakeMove([1, 2, 1, 4]);
  		assertEqual([2, 2], g.GetLastResult());
  		
  		-- the winner was the code breaker
  		assertEqual("CodeMaker", g.GetWinnerPlayer().GetName());
  		
  		IO`print("Winner is: ");
  		IO`println(g.GetWinnerPlayer().GetName());
  	);
  
  public testChampionshipWithEvenNumberOfPlayers : () ==> ()
  	testChampionshipWithEvenNumberOfPlayers() == (
  		dcl p1 : Player := new Player("Tito");
  		dcl p2 : Player := new Player("Cristina");
  		dcl p3 : Player := new Player("Jacinto");
  		dcl p4 : Player := new Player("Ana");
  		dcl games : seq of Game;
  		
  		dcl champ : Championship := new Championship([p1, p2, p3, p4]);
  		assertEqual(4, len champ.GetPlayers());
  		
  		games := champ.CreateGames(champ.GetPlayers());
  		assertEqual(2, len champ.GetGames());
  		IO`println(games);
  	);
  
  public testAll: () ==> ()
  testAll() == (
    testPlayer();
    testPlayerWithKey();
    testGameWinnerCodeBreaker();
    testGameWinnerCodeMaker();
    testChampionshipWithEvenNumberOfPlayers();
  );
  
end GameTests
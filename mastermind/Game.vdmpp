class Game
				types
					public Result = seq of nat
					inv r == len r = 2 and r(1) + r(2) <= 4;
				values
				-- TODO Define values here
				
        instance variables
        private moves : nat := 10;
        public codeMaker: Player;
        public codeBreaker: Player;
        public makerResults : seq of Result := [];
				public breakerMoves: seq of Player`Key := [];
        public finished : bool := false;
        
        inv len makerResults = 10 - moves;
        inv finished => len makerResults > 0 and len makerResults < 11;
        inv forall i in set inds makerResults \ {len makerResults} & makerResults(i) <> [4, 0];
                
        operations
        -- TODO Define operations here
        -- constructor, initializes the game
				public Game: Player * Player ==> Game
					Game(codeMakerPlayer, codeBreakerPlayer) == (
						codeMaker := codeMakerPlayer;
						codeBreaker := codeBreakerPlayer;
						return self
					);
					
				-- get the current number of moves remaining
				pure public GetCurrentMoves : () ==> nat
					GetCurrentMoves () == return moves;
				
				-- get the code maker final key
				pure public GetFinalKey : () ==> seq of int
					GetFinalKey () == return codeMaker.GetKey();
				
				pure public GetLastResult : () ==> Result
					GetLastResult() == (
						return makerResults(len makerResults);
					);
					
				pure public GetWinnerPlayer : () ==> Player
					GetWinnerPlayer() == (
						if GetLastResult() = [4, 0]
							then
								return codeBreaker
						else
							return codeMaker;
					);
					
 			-- adds a new key to the set of the breaker moves and sets the current key of the breaker player
  			public AddKey : Player`Key ==> ()
					AddKey (key) == (
						codeBreaker.SetKey(key);
						breakerMoves := breakerMoves^[key];
					)
				pre len key > 0 and len key < 5 and forall x in set elems key & (x > 0 and x < 7)
				post len breakerMoves = len breakerMoves~ + 1;
				
				-- checks the move of the breaker player
				private CheckMove : () ==> ()
				CheckMove () == (
					dcl e_corrects : nat := 0;
					dcl e_exists : nat := 0;
					dcl makerElemRep : nat := 0;
					dcl breakerElemRep : nat := 0;
					dcl sumMins : nat := 0;
					dcl breakerKey : Player`Key := codeBreaker.GetKey();
					dcl makerKey : Player`Key := codeMaker.GetKey();
				
					for i = 1 to len codeBreaker.GetKey() by 1 do (
							if breakerKey(i) = makerKey(i)
								then
									e_corrects := e_corrects + 1;
					);
					
					for i = 1 to 6 by 1 do (
						makerElemRep := Utils`Count(makerKey, i);
						breakerElemRep := Utils`Count(breakerKey, i);
						sumMins := sumMins + Utils`Min(makerElemRep, breakerElemRep);
					);
					
					e_exists := sumMins - e_corrects;
					
					atomic (
						moves := moves - 1;
						makerResults := makerResults^[[e_corrects, e_exists]];
						finished := e_corrects = 4
					);	
				);
					
				-- print board
				private PrintBoard : seq of Player`Key * seq of Result ==> ()
					PrintBoard (breakerKeys, makerResponses) == (
						dcl currentMove : nat := 10 - moves;
					
						IO`print("Board Game - Move: ");
						IO`println(currentMove);
						IO`println("MOVE                 RESULT [Corrects, Exists]");
						
						for i = len makerResponses to 1 by -1 do (
							IO`print(breakerKeys(i));
							IO`print("         ");
							IO`println(makerResponses(i));
						);
						
						IO`print("Moves Remaing: ");
						IO`println(moves);
						IO`print("\n");
					);
					
				-- make a move
				public MakeMove : (Player`Key) ==> ()
					MakeMove (key) == (
					if moves > 0
						then (
							if not finished
								then (
									AddKey(key);
									CheckMove();
									
									PrintBoard(breakerMoves, makerResults);
									
									if finished
										then (
											IO`println("You win the game.");
											IO`print("The key was ");
											IO`print(codeBreaker.GetKey());
											IO`print(" and your number of tries was ");
											IO`print(len makerResults);
											IO`println(".");
											IO`print("\n");
										)
									elseif moves = 0 and not finished 
										then (
											finished := true;
											IO`println("You lost the game.");
											IO`print("The key was ");
											IO`print(GetFinalKey());
											IO`println(".");
											IO`print("\n");
										);
								)
							else (
								IO`println("The game is over.");
								IO`print("\n");
							)
						)
					else (
						IO`println("The game is over.");
						IO`print("\n");
					)
				)
				pre len key > 0 and len key < 5 and forall x in set elems key & (x > 0 and x < 7);
				
				private GenerateRandomlyKey : () ==> Player`Key
					GenerateRandomlyKey() == (
						dcl randomKey : Player`Key;
						
						for i = 1 to 4 by 1 do (
							randomKey := randomKey^[MATH`rand(4) + 1];
						);
						
						return randomKey;
					);
				--post len randomKey > 0 and len randomKey < 5 and forall x in set elems randomKey & (x > 0 and x < 7);
				
				public PlayRandomly : () ==> ()
					PlayRandomly() == (
						while not finished do (
							
						)
					);
					
				
				
        functions
				-- TODO Define functiones here
				traces
				-- TODO Define Combinatorial Test Traces here
end Game

class Player

types
-- TODO Define types here
	public String = seq of char;
	public Key = seq of int;
	
values
-- TODO Define values here

instance variables
-- TODO Define instance variables here
	private name : String := [];
	private key: Key := [];
	private numMoves : nat := 0;

operations
-- TODO Define operations here
	public Player : () ==> Player
  	Player () == (
  		name := "Default";
  		return self
  	);
  	
  public Player : String ==> Player
  	Player (playerName) == (
  		name := playerName;
  		return self
  	)
  pre len playerName > 0;
  	
  public Player: String * Key ==> Player
  	Player (playerName, playerKey) == (
  		name := playerName;
  		key := playerKey;
  		return self
  	)
  pre len playerKey > 0 and len playerKey < 5 and forall x in set elems playerKey & (x > 0 and x < 7) and len playerName > 0;
  
  pure public GetName : () ==> String
  	GetName () == (
  		return name;
  	);
  	
  -- get the current key of the player
  pure public GetKey: () ==> Key
  	GetKey () == (
  		return key;
  	);
  	
  pure public GetNumberOfMoves : () ==> nat
  	GetNumberOfMoves () == (
  		return numMoves;
  	);
  
  -- sets the current key to a new one
  public SetKey : Key ==> ()
		SetKey (newKey) == (
			key := newKey;
		)
	pre len newKey > 0 and len newKey < 5 and forall x in set elems newKey & (x > 0 and x < 7);
  	
  public SumMoves : nat ==> ()
  	SumMoves (moves) == (
  		numMoves := numMoves + moves;
  	);
	
functions
-- TODO Define functions here

traces
-- TODO Define Combinatorial Test Traces here

end Player